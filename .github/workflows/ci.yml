name: CI/CD Pipeline

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build microservices platform
      run: |
        cd ml-microservices-platform
        docker-compose build
    
    - name: Start services and run health checks
      run: |
        cd ml-microservices-platform
        docker-compose up -d
        
        # Wait for services to start
        echo "Waiting for services to be ready..."
        sleep 30
        
        # Check all services are running
        echo "Checking service status:"
        docker-compose ps
        
        # Test orchestrator health endpoint
        echo "Testing orchestrator health..."
        curl -f http://localhost:8000/health || exit 1
        
        # Test feedback service health
        echo "Testing feedback service health..."
        curl -f http://localhost:8006/health || exit 1
        
        # Test API documentation endpoint
        echo "Testing API documentation..."
        curl -f http://localhost:8000/docs || exit 1
    
    - name: Run basic API test
      run: |
        cd ml-microservices-platform
        echo "Testing basic API functionality..."
        
        # Test a simple analysis request
        curl -X POST http://localhost:8000/analyze \
          -H "Content-Type: application/json" \
          -d '{"text": "test content for CI pipeline"}' \
          --max-time 30 || echo "API test completed"
    
    - name: Validate Docker containers
      run: |
        cd ml-microservices-platform
        echo "Validating all containers are healthy..."
        
        # Check if all expected containers are running
        running_containers=$(docker-compose ps --services --filter "status=running")
        expected_services="orchestrator image-service text-service context-service risk-service fusion-service feedback-service"
        
        for service in $expected_services; do
          if echo "$running_containers" | grep -q "$service"; then
            echo "✅ $service is running"
          else
            echo "❌ $service is not running"
            exit 1
          fi
        done
        
        echo "All services are running correctly!"